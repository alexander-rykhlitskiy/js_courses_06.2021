// ОБЪЕКТЫ
// https://learn.javascript.ru/object-basics
// Представим, что мы разрабатываем сайт ВКонтакте.
// У нас есть страница профиля, на ней нужно отобразить данные о пользователе.
// Создадим переменные, в которых будут храниться эти данные.
let name = 'alex', age = 18, gender = 'male';
// Это может неплохо работать, но потом нам нужно создать страницу друзей,
// и на ней отобразить данные нескольких человек.
// Добавим больше переменных.
let name1 = 'sergei', age1 = 20, gender1 = 'male';
let name2 = 'masha', age2 = 24, gender2 = 'female';
// Но что, если у нас не 3 переменные для описания одного пользователя, а 20?
// Для описания того, что такое переменная, мы использовали метафору "ящик" или "бирка".
// В ситуации с пользователем создается впечатление, что нам не хватает большого ящика,
// в который можно будет положить 3 ящика name, age, gender.
// Для создания таких больших ящиков в JS используются объекты.
// https://learn.javascript.ru/object
// Описываются они фигурными скобками (так же, как и блоки кода в условиях, циклах и т.д.).
let user  = { name: 'alex', age: 18, gender: 'male' };
// Для доступа к полю и записи поля можно использовать [], как и в массивах:
user['name'] //=> 'alex'
user['name'] = 'tony stark'
user['name'] //=> 'tony stark'
// Также можно использовать "."
user.name //=> 'tony stark'
user.name = 'alex'
user['name'] //=> 'alex'

// Эти объекты удобно объединять в массивы.
let users = [
  { name: 'alex', age: 18, gender: 'male' },
  { name: 'sergei', age: 20, gender: 'male' },
  { name: 'masha', age: 24, gender: 'female' }
]
// И сейчас управление этими 9 значениями уже не кажется таким сложным.

// Object
let person = {};
person['name'] = 'vova';
person['age'] = 18;
person['male'] = true;

console.log(person.age);

// ЗАДАНИЕ
// Описать массив из объектов с двумя полями: строковым и числовым.
// Пройти в цикле по массиву и вывести строковое поле каждого объекта, если его числовое поле больше 10.

// Функции.
// https://learn.javascript.ru/function-basics
// Мы уже знаем, что prompt и alert - это функции.
// При этом обе эти функции принимают один параметр - строку, которая должна отобразиться в появившемся диалоге.

// Доп. Как называть переменные и функции https://habr.com/ru/post/558874/

// Мы можем объявить свою функцию.
// Функции в  JavaScript объявляются при помощи ключевого слова function.

// Данная функция принимает один параметр, который называется name.
function showGreeting(name) {
  console.log("привет, " + name);
}
showGreeting("Misha");

// ЗАДАНИЕ
// Написать и вызвать функцию, которая принимает число и выводит в консоль его квадрат.
function sqr(number) {
  console.log(number * number);
}

// Данная функция возвращает число Пи
function getPi() {
  return 22 / 7;
}

// ЗАДАНИЕ
// Написать и вызвать функцию, которая возвращает слово "Привет"
function getGreeting() {
  return "Привет";
}

// ЗАДАНИЕ
// Написать и вызвать функцию, которая принимает один параметр, который называется name.
// Далее она прибавляет name к "Привет, " и возвращает результат
function myFunction(name) {
  return "Привет, " + name;
}
myFunction("Миша"); // = "Привет, Миша"

// Область видимости переменных.
name = "banana"; // объявление глобальной переменной
let name = "banana"; // объявление локальной переменной с блочной видимостью (видна только в блоке кода (if, for, while))
var name = "banana"; // объявление локальной переменной с функциональной видимостью (видна только в данной функции)

// У переменной price в каждой функции и в блоке `if (true) {` свое значение,
// которое не пересекается с другими переменными price
function calcPrice(kilometers, minutes) {
  var price = 2;
  // price = price + kilometers * 0.3;
  // price = price + minutes * 0.1;
  console.log('var price = ' + price)
  if (true) {
    let price = 5; // эта переменная не влияет на переменную var price, объявленную выше. В этом блоке используется только переменная let price.
    console.log('let price = ' + price)
  }
  console.log('var price = ' + price)
  return price;
}

// ЗАДАНИЕ
// Написать функцию, которая принимает массив чисел и возвращает максимальное число из массива.

function getMax(numbers) {
  let max = numbers[0];
  for (let i = 0; i < numbers.length; i++) {
    if (numbers[i] > max) {
      max = numbers[i];
    }
  }
  return max;
}

getMax([1,4,3,8,4])
